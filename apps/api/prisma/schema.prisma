// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  profile   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  analyses     Analysis[]
  meals        Meal[]
  media        Media[]
  refreshTokens RefreshToken[]
  otps         Otp[]

  @@map("users")
}

model Analysis {
  id        String   @id @default(cuid())
  userId    String
  type      String   // IMAGE, TEXT
  status    String   // PENDING, PROCESSING, COMPLETED, FAILED
  metadata  Json?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results AnalysisResult[]

  @@map("analyses")
}

model AnalysisResult {
  id         String   @id @default(cuid())
  analysisId String
  data       Json
  createdAt  DateTime @default(now())

  // Relations
  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("analysis_results")
}

model Meal {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String
  consumedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  items MealItem[]

  @@map("meals")
}

model MealItem {
  id       String  @id @default(cuid())
  mealId   String
  name     String
  calories Float
  protein  Float
  fat      Float
  carbs    Float
  weight   Float?

  // Relations
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@map("meal_items")
}

model Media {
  id       String @id @default(cuid())
  userId   String
  filename String
  mimetype String
  size     Int
  data     Bytes
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  id        String   @id @default(cuid())
  userId    String
  code      String
  secret    String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}
