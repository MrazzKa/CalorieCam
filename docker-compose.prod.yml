version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: caloriecam-postgres
    environment:
      POSTGRES_DB: caloriecam
      POSTGRES_USER: ${DATABASE_USER:-caloriecam_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - caloriecam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-caloriecam_user} -d caloriecam"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: caloriecam-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - caloriecam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.prod
    container_name: caloriecam-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DATABASE_USER:-caloriecam_user}:${DATABASE_PASSWORD:-secure_password_change_me}@postgres:5432/caloriecam
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      JWT_SECRET: ${JWT_SECRET:-jwt_super_secret_key_change_me}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-jwt_refresh_super_secret_key_change_me}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      USDA_API_KEY: ${USDA_API_KEY}
      API_BASE_URL: ${API_BASE_URL:-https://api.caloriecam.com}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://caloriecam.com,https://www.caloriecam.com}
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - caloriecam-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: caloriecam-nginx
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./public:/usr/share/nginx/html/public:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - caloriecam-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: caloriecam-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - caloriecam-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: caloriecam-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password_change_me}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3001:3000"
    networks:
      - caloriecam-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: caloriecam-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - caloriecam-network
    restart: unless-stopped

  # Log Forwarder - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: caloriecam-promtail
    volumes:
      - api_logs:/var/log/api:ro
      - ./nginx/logs:/var/log/nginx:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - caloriecam-network
    depends_on:
      - loki
    restart: unless-stopped

  # Health Monitor & Alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: caloriecam-alertmanager
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - caloriecam-network
    restart: unless-stopped

networks:
  caloriecam-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  api_uploads:
  api_logs:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data:
